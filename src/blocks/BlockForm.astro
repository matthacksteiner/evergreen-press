---
const {
	formName,
	fields,
	submitButton,
	successPage,
	emailSubject,
	emailRecipient,
	spamProtection,
	textFont,
	textSize,
	textColor,
	textAlign,
	buttonLocal,
	buttonSettings,
	buttonColors,
	buttonAlign,
	fieldSpacing,
	formWidth,
	formAlign,
	metadata,
} = Astro.props;

// Generate form action URL - handle linkField structure
let actionUrl = undefined; // Don't redirect by default
if (successPage?.link) {
	if (successPage.link === 'url' && successPage.url) {
		actionUrl = successPage.url;
	} else if (successPage.link === 'page' && successPage.page) {
		actionUrl = successPage.page;
	}
}

// Spacing classes
const spacingClasses = {
	small: 'space-y-4',
	medium: 'space-y-6',
	large: 'space-y-8',
};

// Width classes
const widthClasses = {
	full: 'w-full',
	large: 'w-3/4',
	medium: 'w-1/2',
	small: 'w-1/3',
};

// Alignment classes
const alignClasses = {
	left: 'mx-0',
	center: 'mx-auto',
	right: 'ml-auto',
};

// Button alignment classes
const buttonAlignClasses = {
	left: 'justify-start',
	center: 'justify-center',
	right: 'justify-end',
};

// Define field type
interface FormField {
	type: 'text' | 'email' | 'textarea';
	name: string;
	label: string;
	placeholder: string;
	required: boolean;
	rows?: number;
	help?: string;
}

// Create array of form fields (all are always enabled now)
const formFields: FormField[] = [
	{
		type: 'text',
		name: 'vorname',
		label: fields?.vorname?.label || 'Vorname',
		placeholder: fields?.vorname?.placeholder || 'Ihr Vorname',
		required: true, // Always required as per blueprint
		help: fields?.vorname?.help || '',
	},
	{
		type: 'text',
		name: 'nachname',
		label: fields?.nachname?.label || 'Nachname',
		placeholder: fields?.nachname?.placeholder || 'Ihr Nachname',
		required: true, // Always required as per blueprint
		help: fields?.nachname?.help || '',
	},
	{
		type: 'email',
		name: 'email',
		label: fields?.email?.label || 'E-Mail',
		placeholder: fields?.email?.placeholder || 'ihre@email.de',
		required: true, // Always required as per blueprint
		help: fields?.email?.help || '',
	},
	{
		type: 'textarea',
		name: 'nachricht',
		label: fields?.nachricht?.label || 'Nachricht',
		placeholder: fields?.nachricht?.placeholder || 'Ihre Nachricht an uns',
		required: true, // Always required as per blueprint
		rows: fields?.nachricht?.rows || 5,
		help: fields?.nachricht?.help || '',
	},
];

// Determine spam protection attributes
const isHoneypot = spamProtection === 'honeypot';
const isCaptcha = spamProtection === 'captcha';
const isNoSpamProtection = spamProtection === 'none';
---

<div
	id={metadata?.identifier || undefined}
	class:list={['blockForm', 'blocks', 'relative', metadata?.classes]}
	{...metadata?.attributes}
>
	<div class="container">
		<!-- Success message (hidden by default) -->
		<div
			id="form-success"
			class="mb-4 hidden rounded border border-green-400 bg-green-100 px-4 py-3 text-green-700"
			role="alert"
		>
			<p class="font-medium">Vielen Dank f√ºr Ihre Nachricht!</p>
			<p class="text-sm">
				Wir haben Ihre Anfrage erhalten und werden uns bald bei Ihnen melden.
			</p>
		</div>

		<!-- Error message (hidden by default) -->
		<div
			id="form-error"
			class="mb-4 hidden rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700"
			role="alert"
		>
			<p class="font-medium">Es ist ein Fehler aufgetreten.</p>
			<p class="text-sm">
				Bitte versuchen Sie es erneut oder kontaktieren Sie uns direkt.
			</p>
		</div>

		<form
			name={formName}
			method="POST"
			action={actionUrl}
			data-netlify="true"
			netlify-honeypot={isHoneypot ? 'bot-field' : undefined}
			data-netlify-recaptcha={isCaptcha ? 'true' : undefined}
			class:list={[
				'netlify-form',
				spacingClasses[fieldSpacing] || spacingClasses.medium,
				widthClasses[formWidth] || widthClasses.full,
				alignClasses[formAlign] || alignClasses.left,
			]}
		>
			<!-- Hidden form name for Netlify -->
			<input type="hidden" name="form-name" value={formName} />

			<!-- Custom email subject -->
			{
				emailSubject && (
					<input type="hidden" name="subject" value={emailSubject} />
				)
			}

			<!-- Email recipient for form processing -->
			{
				emailRecipient && (
					<input type="hidden" name="email-recipient" value={emailRecipient} />
				)
			}

			<!-- Honeypot field (only if honeypot protection is selected) -->
			{
				isHoneypot && (
					<p class="hidden">
						<label>
							Don't fill this out if you're human:
							<input name="bot-field" />
						</label>
					</p>
				)
			}

			<!-- Form fields -->
			{
				formFields.map((field) => (
					<div class="form-field">
						{field.type === 'text' && (
							<div class="field-group">
								<label
									for={field.name}
									class:list={[
										'field-label',
										`font--${textSize}`,
										`text--${textColor}`,
										'block mb-2 font-medium',
									]}
								>
									{field.label}
									{field.required && <span class="ml-1 text-red-500">*</span>}
								</label>
								{field.help && (
									<p
										class:list={[
											'field-help',
											`font--${textSize}`,
											`text--${textColor}`,
											'text-sm opacity-75 mb-2',
										]}
									>
										{field.help}
									</p>
								)}
								<input
									type="text"
									id={field.name}
									name={field.name}
									placeholder={field.placeholder}
									required={field.required}
									class:list={[
										'field-input',
										`font--${textSize}`,
										`text--${textColor}`,
										'w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors',
									]}
								/>
							</div>
						)}

						{field.type === 'email' && (
							<div class="field-group">
								<label
									for={field.name}
									class:list={[
										'field-label',
										`font--${textSize}`,
										`text--${textColor}`,
										'block mb-2 font-medium',
									]}
								>
									{field.label}
									{field.required && <span class="ml-1 text-red-500">*</span>}
								</label>
								{field.help && (
									<p
										class:list={[
											'field-help',
											`font--${textSize}`,
											`text--${textColor}`,
											'text-sm opacity-75 mb-2',
										]}
									>
										{field.help}
									</p>
								)}
								<input
									type="email"
									id={field.name}
									name={field.name}
									placeholder={field.placeholder}
									required={field.required}
									class:list={[
										'field-input',
										`font--${textSize}`,
										`text--${textColor}`,
										'w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors',
									]}
								/>
							</div>
						)}

						{field.type === 'textarea' && (
							<div class="field-group">
								<label
									for={field.name}
									class:list={[
										'field-label',
										`font--${textSize}`,
										`text--${textColor}`,
										'block mb-2 font-medium',
									]}
								>
									{field.label}
									{field.required && <span class="ml-1 text-red-500">*</span>}
								</label>
								{field.help && (
									<p
										class:list={[
											'field-help',
											`font--${textSize}`,
											`text--${textColor}`,
											'text-sm opacity-75 mb-2',
										]}
									>
										{field.help}
									</p>
								)}
								<textarea
									id={field.name}
									name={field.name}
									placeholder={field.placeholder}
									required={field.required}
									rows={field.rows || 4}
									class:list={[
										'field-input',
										`font--${textSize}`,
										`text--${textColor}`,
										'w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-y',
									]}
								/>
							</div>
						)}
					</div>
				))
			}

			<!-- reCAPTCHA div (only if captcha protection is selected) -->
			{isCaptcha && <div data-netlify-recaptcha="true" class="my-4" />}

			<!-- Submit button -->
			<div
				class:list={[
					'form-submit flex',
					buttonAlignClasses[buttonAlign] || buttonAlignClasses.left,
				]}
			>
				<button
					type="submit"
					class:list={[
						'submit-button',
						buttonLocal && buttonSettings?.buttonFont
							? `font--${buttonSettings.buttonFont}`
							: `font--${textFont}`,
						buttonLocal && buttonSettings?.buttonFontSize
							? `font--${buttonSettings.buttonFontSize}`
							: `font--${textSize}`,
						buttonLocal && buttonColors?.buttonBackgroundColor
							? `bg-${buttonColors.buttonBackgroundColor}`
							: 'bg-blue-600',
						buttonLocal && buttonColors?.buttonTextColor
							? `text-${buttonColors.buttonTextColor}`
							: 'text-white',
						buttonLocal && buttonColors?.buttonBackgroundColorActive
							? `hover:bg-${buttonColors.buttonBackgroundColorActive}`
							: 'hover:bg-blue-700',
						buttonLocal && buttonColors?.buttonBorderColor
							? `border-${buttonColors.buttonBorderColor}`
							: 'border-transparent',
						'px-6 py-3 rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
						buttonLocal && buttonSettings?.buttonBorderRadius
							? `rounded-[${buttonSettings.buttonBorderRadius}px]`
							: '',
						buttonLocal && buttonSettings?.buttonBorderWidth
							? `border-[${buttonSettings.buttonBorderWidth}px]`
							: 'border',
						buttonLocal && buttonSettings?.buttonPadding
							? `p-[${buttonSettings.buttonPadding}px]`
							: '',
					]}
					style={buttonLocal && buttonSettings
						? {
								borderRadius: buttonSettings.buttonBorderRadius
									? `${buttonSettings.buttonBorderRadius}px`
									: undefined,
								borderWidth: buttonSettings.buttonBorderWidth
									? `${buttonSettings.buttonBorderWidth}px`
									: undefined,
								padding: buttonSettings.buttonPadding
									? `${buttonSettings.buttonPadding}px`
									: undefined,
						  }
						: {}}
				>
					{submitButton || 'Absenden'}
				</button>
			</div>
		</form>
	</div>
</div>

<style
	lang="css"
	is:global
	define:vars={{
		textFont,
	}}
>
	.blockForm {
		.field-label,
		.field-help,
		.field-input,
		.submit-button {
			font-family: var(--textFont);
		}

		.netlify-form {
			max-width: 100%;
		}

		.form-field {
			position: relative;
		}

		.field-input:focus {
			outline: none;
			box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
		}

		.submit-button:hover {
			transform: translateY(-1px);
		}

		.submit-button:active {
			transform: translateY(0);
		}
	}
</style>

<script>
	// Handle form submission with inline success/error messages
	document.addEventListener('DOMContentLoaded', function () {
		const forms = document.querySelectorAll(
			'.netlify-form'
		) as NodeListOf<HTMLFormElement>;

		forms.forEach((form) => {
			form.addEventListener('submit', function (e) {
				const formAction = form.getAttribute('action');
				const successMessage = document.getElementById('form-success');
				const errorMessage = document.getElementById('form-error');
				const submitButton = form.querySelector(
					'.submit-button'
				) as HTMLButtonElement;

				// If no action is specified (no redirect), handle with AJAX
				if (!formAction || formAction === 'undefined') {
					e.preventDefault();

					// Disable submit button
					if (submitButton) {
						submitButton.disabled = true;
						submitButton.textContent = 'Wird gesendet...';
					}

					// Hide any previous messages
					successMessage?.classList.add('hidden');
					errorMessage?.classList.add('hidden');

					// Submit form via fetch
					const formData = new FormData(form);

					fetch('/', {
						method: 'POST',
						headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
						body: new URLSearchParams(formData as any).toString(),
					})
						.then(() => {
							// Show success message
							successMessage?.classList.remove('hidden');
							form.reset();

							// Scroll to success message
							successMessage?.scrollIntoView({
								behavior: 'smooth',
								block: 'center',
							});
						})
						.catch(() => {
							// Show error message
							errorMessage?.classList.remove('hidden');

							// Scroll to error message
							errorMessage?.scrollIntoView({
								behavior: 'smooth',
								block: 'center',
							});
						})
						.finally(() => {
							// Re-enable submit button
							if (submitButton) {
								submitButton.disabled = false;
								submitButton.textContent =
									form.dataset.originalButtonText || 'Absenden';
							}
						});
				} else {
					// Let Netlify handle the redirect normally
					console.log('Form submitted with redirect to:', formAction);
				}
			});

			// Store original button text
			const submitButton = form.querySelector(
				'.submit-button'
			) as HTMLButtonElement;
			if (submitButton && !form.dataset.originalButtonText) {
				form.dataset.originalButtonText =
					submitButton.textContent || 'Absenden';
			}
		});
	});
</script>
