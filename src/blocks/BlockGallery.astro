---
import ImageComponent from '@components/ImageComponent.astro';

const {
	global,
	images,
	layoutType,
	viewMobile,
	viewDesktop,
	viewPaddingMobile,
	viewPaddingDesktop,
	ratioMobile,
	ratioDesktop,
	span,
	metadata,
} = Astro.props;
// Convert padding values to numbers for CSS variables
const paddingDesktopValue = viewPaddingDesktop
	? parseInt(viewPaddingDesktop)
	: 0;
const paddingMobileValue = viewPaddingMobile ? parseInt(viewPaddingMobile) : 0;

// Base classes for different layout types
let layoutClass = 'grid-layout';
if (layoutType === 'masonry') {
	layoutClass = 'masonry-layout';
} else if (layoutType === 'justified') {
	layoutClass = 'justified-layout';
}
---

<section
	id={metadata?.identifier || undefined}
	class:list={['blockGallery', 'blocks', metadata?.classes]}
	{...metadata?.attributes}
	data-layouttype={layoutType}
	data-viewmobile={viewMobile}
	data-viewdesktop={viewDesktop}
	data-viewpaddingmobile={viewPaddingMobile}
	data-viewpaddingdesktop={viewPaddingDesktop}
>
	<div class:list={[layoutClass]}>
		{
			images?.map((image) => (
				<div class="gallery-item">
					<div class="image-wrapper">
						<ImageComponent
							global={global}
							image={image}
							loading="auto"
							ratioMobile={ratioMobile}
							ratioDesktop={ratioDesktop}
							span={span}
						/>
					</div>
				</div>
			))
		}
	</div>
</section>

<script>
	// If using masonry layout, you might want to add Masonry.js here
	if (document.querySelector('.blockGallery[data-layouttype="masonry"]')) {
		// Initialize masonry layout if needed
	}
</script>

<style
	lang="css"
	is:global
	define:vars={{
		viewMobile: viewMobile,
		viewDesktop: viewDesktop,
		paddingMobile: `${paddingMobileValue}px`,
		paddingDesktop: `${paddingDesktopValue}px`,
	}}
>
	/* Grid Layout */
	.blockGallery .grid-layout {
		@apply grid;
		grid-template-columns: repeat(var(--viewMobile), 1fr);
		gap: var(--paddingMobile);
	}

	@media (min-width: 768px) {
		.blockGallery .grid-layout {
			grid-template-columns: repeat(var(--viewDesktop), 1fr);
			gap: var(--paddingDesktop);
		}
	}

	/* Masonry Layout */
	.blockGallery .masonry-layout {
		column-count: var(--viewMobile);
		column-gap: var(--paddingMobile);
	}

	@media (min-width: 768px) {
		.blockGallery .masonry-layout {
			column-count: var(--viewDesktop);
			column-gap: var(--paddingDesktop);
		}
	}

	/* Justified Layout */
	.blockGallery .justified-layout {
		@apply flex flex-wrap;
		gap: var(--paddingMobile);
		align-items: flex-start;
	}

	@media (min-width: 768px) {
		.blockGallery .justified-layout {
			gap: var(--paddingDesktop);
		}
	}

	.blockGallery .justified-layout .gallery-item {
		@apply flex-shrink-0 flex-grow-0;
		height: 200px; /* Base height for mobile */
	}

	.blockGallery .justified-layout .image-wrapper {
		@apply h-full w-full;
	}

	.blockGallery .justified-layout .image-wrapper :global(img) {
		@apply h-full w-full object-cover;
	}

	@media (min-width: 768px) {
		.blockGallery .justified-layout .gallery-item {
			height: 250px; /* Increased height for desktop */
			flex-basis: auto;
		}
	}

	@media (min-width: 1024px) {
		.blockGallery .justified-layout .gallery-item {
			height: 300px; /* Even taller for larger screens */
		}
	}

	/* Item Styles */
	.blockGallery[data-layouttype='masonry'] .gallery-item {
		@apply mb-4 break-inside-avoid;
	}

	.blockGallery[data-layouttype='justified'] .gallery-item {
		@apply flex-grow basis-full md:basis-[calc(50%-1rem)] lg:basis-[calc(33.333%-1rem)];
	}

	.blockGallery .justified-layout .gallery-item {
		@apply flex-grow basis-full;
	}

	@media (min-width: 768px) {
		.blockGallery .justified-layout .gallery-item {
			flex-basis: calc(50% - var(--paddingDesktop));
		}
	}

	@media (min-width: 1024px) {
		.blockGallery .justified-layout .gallery-item {
			flex-basis: calc(33.333% - var(--paddingDesktop));
		}
	}
</style>
