---
import { Image } from 'astro:assets';
import ImageComponent from '@components/ImageComponent.astro';

const {
	global,
	images,
	controls,
	color,
	time,
	effect,
	viewMobile,
	viewDesktop,
	viewPaddingMobile,
	viewPaddingDesktop,
	text,
	font,
	size,
	align,
	textcolor,
	Level,
	toggle,
	ratioMobile,
	ratioDesktop,
	span,
} = Astro.props;

const hasControl = (control) => controls && controls.includes(control);
const arrows = hasControl('arrows');
const dots = hasControl('dots');
const line = hasControl('line');
const full = hasControl('full') ? 'h-screen' : null;
const overlay = toggle && hasControl('overlay') ? 'overlay' : null;
---

<section
	class="blockSlider blocks"
	data-controls={controls}
	data-time={time}
	data-effect={effect}
	data-viewmobile={viewMobile}
	data-viewdesktop={viewDesktop}
	data-viewpaddingmobile={viewPaddingMobile}
	data-viewpaddingdesktop={viewPaddingDesktop}
>
	<div class="swiper swiperSlider">
		<div class="swiper-wrapper items-center">
			{
				images?.map((image) => {
					const isSvg = image.url.endsWith('.svg');
					if (isSvg) {
						return (
							<div class={`swiper-slide ${overlay} absolute`}>
								<Image
									src={image.url}
									width={image.width}
									height={image.height}
									alt={image.alt}
									class={`${full} w-full`}
								/>
							</div>
						);
					} else {
						return (
							<div class={`swiper-slide ${overlay}`}>
								<ImageComponent
									global={global}
									image={image}
									loading="eager"
									class={`${full}`}
									ratioMobile={ratioMobile}
									ratioDesktop={ratioDesktop}
									span={span}
								/>
							</div>
						);
					}
				})
			}
		</div>
		{
			arrows && (
				<nav>
					<div class={`text--${color} swiper-button-next`} />
					<div class={`text--${color} swiper-button-prev`} />
				</nav>
			)
		}
		{
			(dots || line) && (
				<div class={`swiper-pagination swiper-pagination--${color} `} />
			)
		}
		<div
			class="slide-content absolute left-2/4 top-2/4 z-[1] w-4/5 max-w-[75%] -translate-x-2/4 -translate-y-2/4"
		>
			{
				toggle && (
					<div>
						<Level
							set:html={text}
							class={`title font--${size} text--${textcolor} text--${align}`}
						/>
					</div>
				)
			}
		</div>
	</div>

	<script>
		import Swiper, {
			Navigation,
			Autoplay,
			Pagination,
			EffectFade,
		} from 'swiper';
		import 'swiper/css/bundle';
		import 'swiper/css/effect-fade';
		Swiper.use([Navigation, Autoplay, Pagination, EffectFade]);

		const blockSliders = document.querySelectorAll('.blockSlider');

		blockSliders.forEach((blockSlider) => {
			if (blockSlider instanceof HTMLElement) {
				const controls = blockSlider?.dataset.controls;
				const line = controls?.includes('line');
				const time = blockSlider?.dataset.time;
				const effect = blockSlider?.dataset.effect;
				const viewMobile = blockSlider?.dataset.viewmobile
					? blockSlider.dataset.viewmobile
					: '1';
				const viewDesktop = blockSlider?.dataset.viewdesktop
					? blockSlider.dataset.viewdesktop
					: '1';
				const viewPaddingMobile = blockSlider?.dataset.viewpaddingmobile
					? blockSlider.dataset.viewpaddingmobile
					: '0';
				const viewPaddingDesktop = blockSlider?.dataset.viewpaddingdesktop
					? blockSlider.dataset.viewpaddingdesktop
					: '0';
				if (time) {
					const swiperSlider = blockSlider.querySelector('.swiperSlider');
					const swiper = new Swiper(swiperSlider, {
						autoplay: {
							delay: parseInt(time),
						},
						centeredSlidesBounds: true,
						loop: true,
						slidesPerView: parseInt(viewMobile),
						spaceBetween: parseInt(viewPaddingMobile),
						effect: effect === 'fade' ? 'fade' : 'slide',
						navigation: {
							nextEl: blockSlider.querySelector('.swiper-button-next'),
							prevEl: blockSlider.querySelector('.swiper-button-prev'),
						},
						pagination: {
							el: blockSlider.querySelector('.swiper-pagination'),
							type: line ? 'progressbar' : 'bullets',
							clickable: true,
						},
						breakpoints: {
							1024: {
								slidesPerView: parseInt(viewDesktop),
								spaceBetween: parseInt(viewPaddingDesktop),
							},
						},
					});
				}
			}
		});
	</script>

	<style
		lang="css"
		is:global
		define:vars={{
			font,
		}}
	>
		.title {
			font-family: var(--font);
		}
		.overlay:before {
			@apply absolute left-0 top-0 z-10 h-full w-full bg-[rgba(_0,0,0,0.25_)] content-[''];
		}

		.swiper-pagination--primary .swiper-pagination-bullet-active,
		.swiper-pagination--primary .swiper-pagination-progressbar-fill {
			@apply bg-primary;
		}

		.swiper-pagination--secondary .swiper-pagination-bullet-active,
		.swiper-pagination--secondary .swiper-pagination-progressbar-fill {
			@apply bg-secondary;
		}

		.swiper-pagination--tertiary .swiper-pagination-bullet-active,
		.swiper-pagination--tertiary .swiper-pagination-progressbar-fill {
			@apply bg-tertiary;
		}

		.swiper-pagination--black .swiper-pagination-bullet-active,
		.swiper-pagination--black .swiper-pagination-progressbar-fill {
			@apply bg-black;
		}

		.swiper-pagination--white .swiper-pagination-bullet-active,
		.swiper-pagination--white .swiper-pagination-progressbar-fill {
			@apply bg-white;
		}

		.swiper-pagination--transparent .swiper-pagination-bullet-active,
		.swiper-pagination--transparent .swiper-pagination-progressbar-fill {
			@apply bg-transparent;
		}
	</style>
</section>
