---
import ImageComponent from '@components/ImageComponent.astro';

const {
	images,
	ratioMobile,
	ratioDesktop,
	controls,
	color,
	time,
	viewMobile,
	viewDesktop,
	viewPaddingMobile,
	viewPaddingDesktop,
	text,
	font,
	size,
	align,
	textcolor,
	Level,
	toggle,
} = Astro.props;
const hasControl = (control) => controls && controls.includes(control);
const arrows = hasControl('arrows');
const dots = hasControl('dots');
const line = hasControl('line');
const full = hasControl('full') ? 'h-screen' : null;
const overlay = hasControl('overlay') ? 'overlay' : null;
---

<section
	class="blockSlider blocks"
	data-controls={controls}
	data-time={time}
	data-viewmobile={viewMobile}
	data-viewdesktop={viewDesktop}
	data-viewpaddingmobile={viewPaddingMobile}
	data-viewpaddingdesktop={viewPaddingDesktop}
>
	<div class="swiper swiperSlider">
		<div class="swiper-wrapper">
			{
				images?.map((image) => (
					<div class={`swiper-slide ${overlay}`}>
						<ImageComponent
							image={image}
							ratioMobile={ratioMobile}
							ratioDesktop={ratioDesktop}
							loading="eager"
							class={`${full}`}
						/>
					</div>
				))
			}
		</div>
		{
			arrows && (
				<nav>
					<div class={`text--${color} swiper-button-next`} />
					<div class={`text--${color} swiper-button-prev`} />
				</nav>
			)
		}
		{
			(dots || line) && (
				<div class={`swiper-pagination swiper-pagination--${color}`} />
			)
		}
		<div
			class="slide-content absolute left-2/4 top-2/4 z-[1] w-4/5 max-w-[600px] -translate-x-2/4 -translate-y-2/4"
		>
			{
				toggle ? (
					<Level
						set:html={text}
						class:list={[
							`title font--${size}`,
							`text--${textcolor}`,
							`text--${align}`,
						]}
					/>
				) : null
			}
		</div>
	</div>
</section>

<script>
	import Swiper, { Navigation, Autoplay, Pagination } from 'swiper';
	import 'swiper/css/bundle';
	Swiper.use([Navigation, Autoplay, Pagination]);

	const blockSliders = document.querySelectorAll('.blockSlider');

	blockSliders.forEach((blockSlider) => {
		if (blockSlider instanceof HTMLElement) {
			const controls = blockSlider?.dataset.controls;
			const line = controls?.includes('line');
			const time = blockSlider?.dataset.time;
			const viewMobile = blockSlider?.dataset.viewmobile
				? blockSlider.dataset.viewmobile
				: '1';
			const viewDesktop = blockSlider?.dataset.viewdesktop
				? blockSlider.dataset.viewdesktop
				: '1';
			const viewPaddingMobile = blockSlider?.dataset.viewpaddingmobile
				? blockSlider.dataset.viewpaddingmobile
				: '0';
			const viewPaddingDesktop = blockSlider?.dataset.viewpaddingdesktop
				? blockSlider.dataset.viewpaddingdesktop
				: '0';
			if (time) {
				const swiperSlider = blockSlider.querySelector(
					'.swiperSlider'
				) as HTMLElement;
				const swiper = new Swiper(swiperSlider, {
					autoplay: {
						delay: parseInt(time),
					},
					slidesPerView: parseInt(viewMobile),
					spaceBetween: parseInt(viewPaddingMobile),
					loop: true,
					navigation: {
						nextEl: blockSlider.querySelector(
							'.swiper-button-next'
						) as HTMLElement,
						prevEl: blockSlider.querySelector(
							'.swiper-button-prev'
						) as HTMLElement,
					},
					pagination: {
						el: blockSlider.querySelector('.swiper-pagination') as HTMLElement,
						type: line ? 'progressbar' : 'bullets',
						clickable: true,
					},
					breakpoints: {
						1024: {
							slidesPerView: parseInt(viewDesktop),
							spaceBetween: parseInt(viewPaddingDesktop),
						},
					},
				});
			}
		}
	});
</script>

<style
	lang="css"
	is:global
	define:vars={{
		font,
	}}
>
	.title {
		font-family: var(--font);
	}
	.overlay:before {
		@apply absolute left-0 top-0 h-full w-full bg-[rgba(_0,0,0,0.25_)] content-[''];
	}

	.swiper-pagination--primary .swiper-pagination-bullet-active,
	.swiper-pagination--primary .swiper-pagination-progressbar-fill {
		@apply bg-primary;
	}

	.swiper-pagination--secondary .swiper-pagination-bullet-active,
	.swiper-pagination--secondary .swiper-pagination-progressbar-fill {
		@apply bg-secondary;
	}

	.swiper-pagination--tertiary .swiper-pagination-bullet-active,
	.swiper-pagination--tertiary .swiper-pagination-progressbar-fill {
		@apply bg-tertiary;
	}

	.swiper-pagination--black .swiper-pagination-bullet-active,
	.swiper-pagination--black .swiper-pagination-progressbar-fill {
		@apply bg-black;
	}

	.swiper-pagination--white .swiper-pagination-bullet-active,
	.swiper-pagination--white .swiper-pagination-progressbar-fill {
		@apply bg-white;
	}

	.swiper-pagination--transparent .swiper-pagination-bullet-active,
	.swiper-pagination--transparent .swiper-pagination-progressbar-fill {
		@apply bg-transparent;
	}
</style>
