---
interface PageEntry {
	id: string;
	uri: string;
	intendedTemplate: string;
	parent: string | null;
	coverOnly: boolean | null;
	translations: Record<string, string>;
}

import rootIndex from '@public/content/index.json';
import PageRenderer from '@components/PageRenderer.astro';
import { getPage, getData, type GlobalData } from '@lib/api';

export async function getStaticPaths() {
	// Load the root index which contains all pages
	const pages = rootIndex as PageEntry[];

	// Extract languages from the pages
	const languages = new Set<string>();

	// Process all pages to find available languages
	pages.forEach((page) => {
		if (page.translations) {
			Object.keys(page.translations).forEach((lang) => {
				languages.add(lang);
			});
		}
	});

	// Generate paths for all language/page combinations
	const paths: {
		params: { lang: string; slug: string };
		props: { lang: string; slug: string };
	}[] = [];

	for (const lang of languages) {
		// Get all pages available in this language
		const langPages = pages.filter(
			(page) => page.translations && page.translations[lang]
		);

		// Create a path for each page in this language
		for (const page of langPages) {
			const slug = page.translations[lang];
			paths.push({
				params: {
					lang,
					slug,
				},
				props: {
					lang,
					slug,
				},
			});
		}
	}

	return paths;
}

// Get data from props, not params
const { lang, slug } = Astro.props;

// Use API functions to get data
const pageData = await getPage(slug, lang);
const globalData = await getData<GlobalData>(`/${lang}/global.json`);
---

<PageRenderer slug={slug} lang={lang} data={pageData} global={globalData} />
