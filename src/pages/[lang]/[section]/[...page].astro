---
import PageRenderer from '@components/PageRenderer.astro';
import {
	getPage,
	getData,
	getLanguageContext,
	type GlobalData,
} from '@lib/api';

export async function getStaticPaths({ paginate }) {
	const API_URL = import.meta.env.KIRBY_URL;
	const global = await getData<GlobalData>(`/global.json`);
	const elements = global.paginationElements;

	const { allLangs, prefixDefaultLocale, translations } =
		await getLanguageContext();

	// Determine which languages to generate paths for
	const languagesToGenerate = !prefixDefaultLocale
		? translations
		: allLangs.map((lang) => lang.code);

	let paths: Array<{ params: { lang: string; section: string }; props: any }> =
		[];

	for (const langCode of languagesToGenerate) {
		const pagesResponse = await fetch(API_URL + '/' + langCode + '/index.json');
		const data = await pagesResponse.json();
		const sections = data.filter((item) => item.intendedTemplate === 'section');

		for (const section of sections) {
			const itemsResponse = await fetch(
				API_URL + '/' + langCode + `/${section.uri}.json`
			);
			const itemsData = await itemsResponse.json();
			const filteredItems = itemsData.items.filter(
				(item) => item.parent === section.uri
			);
			paths.push(
				...paginate(filteredItems, {
					params: { lang: langCode, section: section.uri },
					pageSize: elements,
				})
			);
		}
	}
	return paths;
}

const { page } = Astro.props;
const { lang, section } = Astro.params;
const global = await getData<GlobalData>(`/${lang}/global.json`);
---

<PageRenderer slug={section} lang={lang} page={page} global={global} />
