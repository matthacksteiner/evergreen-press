---
interface PageEntry {
	id: string;
	uri: string;
	intendedTemplate: string;
	parent: string | null;
	coverOnly: boolean | null;
	translations: Record<string, string>;
}

import rootIndex from '@public/content/index.json';
import PageRenderer from '@components/PageRenderer.astro';
import { getData, getSection, type GlobalData } from '@lib/api';

export async function getStaticPaths({ paginate }) {
	// Get global config for pagination settings
	const globalData = await getData<GlobalData>('/global.json');
	const elements = globalData.paginationElements || 10;

	// Load the root index which contains all pages
	const pages = rootIndex as PageEntry[];

	// Extract languages from the pages
	const languages = new Set<string>();

	// Process all pages to find available languages
	pages.forEach((page) => {
		if (page.translations) {
			Object.keys(page.translations).forEach((lang) => {
				languages.add(lang);
			});
		}
	});

	// Define the return type for paths
	const paths: any[] = [];

	for (const lang of languages) {
		// Find section pages in this language
		const sections = pages.filter(
			(page) =>
				page.intendedTemplate === 'section' &&
				page.translations &&
				page.translations[lang]
		);

		for (const section of sections) {
			if (!section.translations || !section.translations[lang]) continue;

			const sectionSlug = section.translations[lang];

			try {
				// Use API to get section data
				const sectionData = await getSection(sectionSlug, lang);

				// Filter items that belong to this section
				const filteredItems = sectionData.items.filter(
					(item) => item.parent === section.uri
				);

				// Add pagination paths with props
				const paginatedPaths = paginate(filteredItems, {
					params: { lang, section: sectionSlug, page: [''] },
					pageSize: elements,
					props: { lang, section: sectionSlug },
				});

				paths.push(...paginatedPaths);
			} catch (error) {
				console.error(
					`Error loading section data for ${lang}/${sectionSlug}`,
					error
				);
			}
		}
	}

	return paths;
}

// Get data from props
const { page } = Astro.props;
const { lang, section } = Astro.props;

// Get data using API functions
const globalData = await getData<GlobalData>(`/${lang}/global.json`);
---

<PageRenderer slug={section} lang={lang} page={page} global={globalData} />
