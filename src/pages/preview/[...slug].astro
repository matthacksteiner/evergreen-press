---
export const prerender = false;

import {
	getData,
	getGlobal,
	getPageWithFallback,
	getLanguages,
	type GlobalData,
	type PageData,
} from '@lib/api';
import PageRenderer from '@components/PageRenderer.astro';

// Set environment variable for preview mode detection
process.env.ASTRO_PATH = Astro.url.pathname;

// Variables to store our state
let pageData: PageData | undefined;
let globalData: GlobalData | undefined;
let errorState: boolean = false;
let sectionPageData: any = null;
let currentLangCode: string | undefined;
let endpointSlug: string = 'home';

try {
	// Get the slug parameter from the URL
	const { slug } = Astro.params;

	if (!slug) {
		// Handle the root preview URL
		currentLangCode = undefined; // Use default language
		endpointSlug = 'home';
	} else {
		// Parse the path from the URL
		const slugParts = slug.split('/');

		// Get available languages from API
		const languages = await getLanguages();
		const langCodes = languages.allLang
			.map((lang: any) => (typeof lang === 'string' ? lang : lang?.code || ''))
			.filter(Boolean);

		// Check if first segment is a language code
		if (slugParts.length > 0 && langCodes.includes(slugParts[0])) {
			currentLangCode = slugParts[0];
			// Remove language from path
			slugParts.shift();
			endpointSlug = slugParts.length > 0 ? slugParts.join('/') : 'home';
		} else {
			// No language prefix, use the whole slug
			currentLangCode = undefined; // Will use default
			endpointSlug = slug;
		}
	}

	try {
		// Get the page data
		pageData = await getPageWithFallback(endpointSlug, currentLangCode);
		globalData = currentLangCode
			? await getData<GlobalData>(`/${currentLangCode}/global.json`)
			: await getData<GlobalData>(`/global.json`);

		// Handle section pages with pagination
		if (pageData && pageData.intendedTemplate === 'section') {
			const endpoint = currentLangCode
				? `/${currentLangCode}/${endpointSlug}.json`
				: `/${endpointSlug}.json`;

			const sectionResult = await getData<PageData & { items: PageData[] }>(
				endpoint
			);
			const items = sectionResult.items || [];

			// Simple pagination for preview
			const pageSize = globalData.paginationElements || 10;
			const paginatedItems = items.slice(0, pageSize);

			sectionPageData = {
				data: paginatedItems,
				url: { current: endpointSlug, prev: null, next: null },
				currentPage: 1,
				lastPage: Math.ceil(items.length / pageSize),
			};
		}
	} catch (innerError) {
		console.error('Error in preview route:', innerError);

		// Get error page data on inner error
		pageData = await getData<PageData>(`/error.json`);
		globalData = currentLangCode
			? await getData<GlobalData>(`/${currentLangCode}/global.json`)
			: await getData<GlobalData>(`/global.json`);
	}
} catch (outerError) {
	console.error('Fatal error in preview route:', outerError);
	errorState = true;
}
---

{
	errorState ? (
		<div class="p-8">
			<h1 class="text-2xl font-bold text-red-600">Preview Error</h1>
			<p class="mt-4">
				Could not load preview. Please check the console for details.
			</p>
		</div>
	) : pageData && globalData ? (
		sectionPageData ? (
			<PageRenderer
				slug={endpointSlug}
				lang={currentLangCode}
				data={pageData}
				global={globalData}
				page={sectionPageData}
			/>
		) : (
			<PageRenderer
				slug={endpointSlug}
				lang={currentLangCode}
				data={pageData}
				global={globalData}
			/>
		)
	) : (
		<div class="p-8">
			<h1 class="text-2xl font-bold text-red-600">Data Loading Error</h1>
			<p class="mt-4">
				Failed to load required data. Please check the console for details.
			</p>
		</div>
	)
}
