---
export const prerender = false;

import {
	getData,
	getGlobal,
	getPageWithFallback,
	getSection,
	type GlobalData,
	type PageData,
	type SectionData,
} from '@lib/api';
import BaseLayout from '@layouts/BaseLayout.astro';
import Layouts from '@components/Layouts.astro';
import Section from '@components/Section.astro';

// Set environment variable for preview mode detection
process.env.ASTRO_PATH = Astro.url.pathname;

const initialGlobal = await getGlobal();
const prefixDefaultLocale = initialGlobal.prefixDefaultLocale;
const defaultLang = initialGlobal.defaultLang;
const currentLang = Astro.currentLocale;
const { slug } = Astro.params;

let endpoint;
if (prefixDefaultLocale && currentLang === defaultLang) {
	endpoint = 'home';
} else {
	endpoint = slug && slug !== currentLang ? slug : 'home';
}

// Initialize variables that will be used in the template
let data: PageData;
let global: GlobalData;
let pageTitle: string;
let sectionData: PageData | null = null;
let items: PageData[] = [];
let paginatedItems: PageData[] = [];
let currentPage = 1;
let lastPage = 1;
let pageUrls: {
	current: string;
	prev: string | null;
	next: string | null;
} = {
	current: '',
	prev: null,
	next: null,
};

try {
	// Get the page data using our new utility function
	data = await getPageWithFallback(endpoint, currentLang);

	// Get global data
	global = currentLang
		? await getData<GlobalData>(`/${currentLang}/global.json`)
		: await getData<GlobalData>(`/global.json`);

	pageTitle = data.title;

	// Handle sections and items if needed
	if (data.intendedTemplate === 'section') {
		const sectionResult = await getSection(endpoint, currentLang);
		items = sectionResult.items || [];
		sectionData = data;
	}

	// Prepare pagination information
	const pageSize = global.paginationElements || 10;
	currentPage = 1;
	lastPage = Math.ceil(items.length / pageSize);
	paginatedItems = items.slice(0, pageSize);

	// Pagination URLs
	const currentUrl = `${endpoint}`;
	const prevUrl =
		currentPage > 1 ? `${endpoint}/page/${currentPage - 1}` : null;
	const nextUrl =
		currentPage < lastPage ? `${endpoint}/page/${currentPage + 1}` : null;
	pageUrls = {
		current: currentUrl,
		prev: prevUrl,
		next: nextUrl,
	};
} catch (error) {
	if (error.message?.startsWith('REDIRECT:')) {
		const redirectUrl = error.message.split('REDIRECT:')[1];
		throw Astro.redirect(redirectUrl);
	}
	throw error;
}
---

<BaseLayout pageTitle={pageTitle} data={data} global={global}>
	{
		sectionData ? (
			<>
				<h1 class="fixed z-50 bg-white">
					Pagination is currently not working in Preview Mode
				</h1>
				<Section
					data={sectionData}
					global={global}
					page={{
						data: paginatedItems,
						url: pageUrls,
						currentPage,
						lastPage,
					}}
				/>
			</>
		) : (
			<Layouts layouts={data.layouts} data={data} global={global} />
		)
	}
	<div
		class="fixed bottom-4 right-4 z-40 rounded-lg bg-red-600 px-3 py-1 font-medium text-white shadow-md"
	>
		Preview Mode
	</div>
</BaseLayout>
