---
import { Image } from 'astro:assets';

const isProd = import.meta.env.PROD;
const netlifyDev = import.meta.env.NETLIFY_DEV;
const netlifyUrl = import.meta.env.NETLIFY_URL;

const baseUrl = isProd
	? netlifyUrl
	: netlifyDev
	? 'http://localhost:8888'
	: netlifyUrl;

const { src, urlFocus, urlFocusMobile, ...props } = Astro.props;
const getRatio = (ratio, width, height) => {
	const [numerator, denominator] =
		ratio === 'original' ? [width, height] : ratio.split('/');
	return Number(numerator) / Number(denominator);
};

const ratioDesktop = getRatio(props.ratioDesktop, props.width, props.height);
const ratioMobile = getRatio(props.ratioMobile, props.width, props.height);

const sourceMobile = props.ratioMobile === 'original' ? src : urlFocusMobile;
const sourceDesktop = props.ratioDesktop === 'original' ? src : urlFocus;

const span = props.span;
const gridMarginTotal = 2;
const gridMarginDesktop = props.gridMarginDesktop * gridMarginTotal;
const gridMarginMobile = props.gridMarginMobile * gridMarginTotal;

const backgroundContainer = props.backgroundContainer
	? props.backgroundContainer
	: 'container';

const imageWidth = (containerWidth) =>
	Math.round(containerWidth / 12) * Number(span);
const imageHeight = (imageWidth, ratio) => Math.round(imageWidth / ratio);

const imageWidthDesktop = imageWidth(
	backgroundContainer === 'container' ? 1920 - gridMarginDesktop : 2560
);
const imageWidthMobile = 390 - gridMarginMobile;
const imageHeightMobile = imageHeight(imageWidthMobile, ratioMobile);
const imageWidthDesktop1280 = imageWidth(1280);
const imageWidthDesktop1920 = imageWidth(1920 - gridMarginDesktop);
const imageHeightDesktop = imageHeight(imageWidthDesktop, ratioDesktop);
const imageHeightDesktop1280 = imageHeight(imageWidthDesktop1280, ratioDesktop);
const imageHeightDesktop1920 = imageHeight(imageWidthDesktop1920, ratioDesktop);

interface Props {
	src: string;
	urlFocus: string;
	urlFocusMobile: string;
	width: number;
	height: number;
	alt: string;
	name: string;
	ratioMobile: string;
	ratioDesktop: string;
	span: string;
	position: string;
	id: string;
	class: string;
	loading: 'eager' | 'lazy';
	backgroundContainer: string;
	gridMarginDesktop: number;
	gridMarginMobile: number;
}

const altFallback = props.name
	.replace(/[-_]/g, ' ') // Replace all '-' and '_' with spaces
	.replace(/[^\w\s]/g, '') // Remove all non-alphanumeric characters
	.replace(/\b\w/g, (char) => char.toUpperCase()); // Capitalize the first letter of each word

const generateSrcSet = (source, width, height) => {
	const srcSetValues = [1, 2, 3].map((value) => {
		const multipliedWidth = width * value;
		const multipliedHeight = height * value;
		return `${baseUrl}/.netlify/images?url=${source}&w=${multipliedWidth}&h=${multipliedHeight}&fit=cover ${value}x`;
	});

	return srcSetValues.join(', ');
};

const generateImgSrc = (source, width, height) => {
	return `${baseUrl}/.netlify/images?url=${source}&w=${width}&h=${height}&fit=cover&fm=jpg&q=80`;
};
---

{
	isProd || netlifyDev ? (
		<picture>
			<source
				srcset={generateSrcSet(
					sourceMobile,
					imageWidthMobile,
					imageHeightMobile
				)}
				media="(max-width: 768px)"
			/>
			<source
				srcset={generateSrcSet(
					sourceDesktop,
					imageWidthDesktop1280,
					imageHeightDesktop1280
				)}
				media="(min-width: 769px) and (max-width: 1280px)"
			/>
			<source
				srcset={generateSrcSet(
					sourceDesktop,
					imageWidthDesktop1920,
					imageHeightDesktop1920
				)}
				media="(min-width: 1281px) and (max-width: 1920px)"
			/>
			<source
				srcset={generateSrcSet(
					sourceDesktop,
					imageWidthDesktop,
					imageHeightDesktop
				)}
				media="(min-width: 1921px)"
			/>
			<img
				src={generateImgSrc(
					sourceDesktop,
					imageWidthDesktop,
					imageHeightDesktop
				)}
				width={imageWidthDesktop}
				height={imageHeightDesktop}
				alt={props.alt || altFallback}
				loading={props.loading}
				id={props.id}
				class:list={[props.class]}
			/>
		</picture>
	) : (
		<>
			<Image
				src={sourceMobile}
				{...props}
				width={imageWidthMobile}
				height={imageHeightMobile}
				alt={props.alt || altFallback}
				loading={props.loading}
				class:list={['lg:hidden', props.class]}
			/>

			<Image
				src={sourceDesktop}
				width={imageWidthDesktop}
				height={imageHeightDesktop}
				alt={props.alt || altFallback}
				loading={props.loading}
				{...props}
				class:list={['hidden', 'lg:block', props.class]}
			/>
		</>
	)
}
