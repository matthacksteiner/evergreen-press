---
const { global, class: className } = Astro.props;
const { lang } = Astro.params;
import { Icon } from 'astro-icon/components';
import { getAllPages } from '@lib/api';
import { checkIsHome } from '@lib/helpers.js';

// Follow the same pattern as in Section.astro and slug files
const defaultLang = global.defaultLang.code;
const allLangs = global.allLang;
const translations = global.translations.map((lang) => lang.code);
const prefixDefaultLocale = global.prefixDefaultLocale;
const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;
const headerColor = global.headerColor;
const headerBackground = global.headerBackground;

// Determine the currently selected language
const currentLang = lang || defaultLang;
const selectedLang =
	allLangs.find((l) => l.code === currentLang) || global.defaultLang;

// Parse the current URL pathname
const pathname = new URL(Astro.request.url).pathname.split('/');
const isHome = checkIsHome({
	url: { pathname: Astro.url.pathname },
	currentLocale: currentLang,
});

// Get all pages for translations
const allPages = await getAllPages(currentLang);

// Extract the current page slug based on URL structure
let currentPageSlug = '';
if (isHome) {
	currentPageSlug = 'home';
} else if (translations.includes(pathname[1])) {
	// URL format: /[lang]/[page]
	currentPageSlug = pathname.slice(2).join('/') || 'home';
} else {
	// URL format: /[page]
	currentPageSlug = pathname.slice(1).join('/');
}

// Find the current page by its uri in the current language
const currentPage = allPages.find((page) => page.uri === currentPageSlug);

// Method to find translations for different languages
function getTranslatedPageUrl(targetLangCode) {
	// Handle home page as a special case
	if (isHome || currentPageSlug === 'home') {
		return targetLangCode === defaultLang && !prefixDefaultLocale
			? '/'
			: `/${targetLangCode}`;
	}

	// If we have a current page with translations
	if (currentPage && currentPage.translations) {
		// The translations object maps target language code to translated URI
		const translatedUri = currentPage.translations[targetLangCode];

		if (translatedUri) {
			// Format the URL based on language settings
			return targetLangCode === defaultLang && !prefixDefaultLocale
				? `/${translatedUri}`
				: `/${targetLangCode}/${translatedUri}`;
		}
	}

	// If no translation found or no current page, fallback to language root
	return targetLangCode === defaultLang && !prefixDefaultLocale
		? '/'
		: `/${targetLangCode}`;
}
---

{
	translations.length > 0 && (
		<details class:list={['relative', className]}>
			<summary class="flex cursor-pointer list-none items-center focus:outline-none">
				<Icon name="language" aria-hidden="true" class="mr-2 h-4 w-4" />
				<span class={`uppercase font--${headerFontSize} font-${headerFont}`}>
					{selectedLang.code}
				</span>

				<Icon
					name="chevron-down"
					aria-hidden="true"
					class="chevron ml-2 h-4 w-4 transition-transform duration-200"
				/>
			</summary>

			<ul
				class:list={[
					`bg--${headerBackground}`,
					`text--${headerColor}`,
					`absolute`,
					`right-0`,
					`top-6`,
					`z-10`,
					`mt-2`,
					`py-2`,
					`w-16`,
					`rounded`,
					`shadow-lg`,
					`flex`,
					`flex-col`,
					`gap-2`,
					`uppercase`,
					`items-center`,
				]}
			>
				{allLangs
					// Remove the currently selected language from the options.
					.filter((language) => language.code !== selectedLang.code)
					.map((language) => (
						<li>
							<a
								href={getTranslatedPageUrl(language.code)}
								class="block hover:opacity-50"
							>
								{language.code}
							</a>
						</li>
					))}
			</ul>
		</details>
	)
}

<style>
	details[open] .chevron {
		transform: rotate(180deg);
	}
	.menu--active {
		&.textActive {
			&--primary {
				@apply text-primary;
			}
			&--secondary {
				@apply text-secondary;
			}
			&--tertiary {
				@apply text-tertiary;
			}
			&--white {
				@apply text-white;
			}
			&--black {
				@apply text-black;
			}
		}

		&.bgActive {
			&--primary {
				@apply bg-primary;
			}
			&--secondary {
				@apply bg-secondary;
			}
			&--tertiary {
				@apply bg-tertiary;
			}
			&--white {
				@apply bg-white;
			}
			&--black {
				@apply bg-black;
			}
		}
	}
</style>
