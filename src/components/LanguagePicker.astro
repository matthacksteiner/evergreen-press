---
const { global, class: className, ...rest } = Astro.props;
const { lang } = Astro.params;
const defaultLang = global.defaultLang;
const allLangs = global.allLang;
const translations = global.translations;
const currentLang = lang;
const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;
---

{
	translations.length > 0 && (
		<ul
			class={`lang ${className} font--${headerFontSize} flex gap-8 uppercase transition-all duration-300 ease-in-out lg:gap-4`}
		>
			{allLangs
				.filter((language) => language.code !== currentLang)
				.filter((language) => lang || language.code !== defaultLang.code)
				.map((language) => {
					const path = Astro.url.origin;
					const lang = language.code;
					return (
						<li>
							<a href={`/${lang === defaultLang.code ? '' : lang}`}>
								{language.code}
							</a>
						</li>
					);
				})}
		</ul>
	)
}

<style lang="css" define:vars={{ headerFont }}>
	.langDesktop {
		font-family: var(--headerFont);
	}
</style>
