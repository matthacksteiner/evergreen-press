---
const { global, class: className } = Astro.props;
const { lang } = Astro.params;
import { Icon } from 'astro-icon/components';
import { getAllPages, getData } from '@lib/api';
import { checkIsHome } from '@lib/helpers.js';

// Follow the same pattern as in Section.astro and slug files
const defaultLang = global.defaultLang.code;
const allLangs = global.allLang;
const translations = global.translations.map((lang) => lang.code);
const prefixDefaultLocale = global.prefixDefaultLocale;
const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;
const headerColor = global.headerColor;
const headerBackground = global.headerBackground;

// Determine the currently selected language
const currentLang = lang || defaultLang;
const selectedLang =
	allLangs.find((l) => l.code === currentLang) || global.defaultLang;

// Parse the current URL pathname
const pathname = new URL(Astro.request.url).pathname.split('/').filter(Boolean);
const isHome = checkIsHome({
	url: { pathname: Astro.url.pathname },
	currentLocale: currentLang,
});

// Get pages for both current and target languages
const currentPages = await getAllPages(currentLang);

// Extract the current page slug based on URL structure
let currentPageSlug = '';
if (isHome) {
	currentPageSlug = 'home';
} else if (translations.includes(pathname[0])) {
	// URL format: /[lang]/[page]
	currentPageSlug = pathname.slice(1).join('/') || 'home';
} else {
	// URL format: /[page]
	currentPageSlug = pathname.join('/');
}

// Find the current page data
const currentPage = currentPages.find((page) => {
	const pageUri = page.uri.split('/').pop();
	return pageUri === currentPageSlug || page.uri === currentPageSlug;
});

// Method to find translations for different languages
async function getTranslatedPageUrl(targetLangCode) {
	// Home page handling
	if (isHome || currentPageSlug === 'home') {
		return targetLangCode === defaultLang && !prefixDefaultLocale
			? '/'
			: `/${targetLangCode}`;
	}

	try {
		// Get pages in target language
		const targetPages = await getAllPages(targetLangCode);

		// Find matching page in target language
		const targetPage = targetPages.find(
			(page) =>
				currentPage?.translations?.[targetLangCode] === page.uri ||
				page.translations?.[currentLang] === currentPage?.uri
		);

		if (targetPage) {
			return targetLangCode === defaultLang && !prefixDefaultLocale
				? `/${targetPage.uri}`
				: `/${targetLangCode}/${targetPage.uri}`;
		}
	} catch (error) {
		console.error('Error fetching translations:', error);
	}

	// Fallback to language root if no translation found
	return targetLangCode === defaultLang && !prefixDefaultLocale
		? '/'
		: `/${targetLangCode}`;
}

// Pre-fetch all translated URLs
const translatedUrls = await Promise.all(
	allLangs
		.filter((language) => language.code !== selectedLang.code)
		.map(async (language) => ({
			code: language.code,
			url: await getTranslatedPageUrl(language.code),
		}))
);
---

{
	translations.length > 0 && (
		<details class:list={['relative', className]}>
			<summary class="flex cursor-pointer list-none items-center focus:outline-none">
				<Icon name="language" aria-hidden="true" class="mr-2 h-4 w-4" />
				<span class={`uppercase font--${headerFontSize} font-${headerFont}`}>
					{selectedLang.code}
				</span>
				<Icon
					name="chevron-down"
					aria-hidden="true"
					class="chevron ml-2 h-4 w-4 transition-transform duration-200"
				/>
			</summary>

			<ul
				class:list={[
					`bg--${headerBackground}`,
					`text--${headerColor}`,
					`absolute`,
					`right-0`,
					`top-6`,
					`z-10`,
					`mt-2`,
					`py-2`,
					`w-16`,
					`rounded`,
					`shadow-lg`,
					`flex`,
					`flex-col`,
					`gap-2`,
					`uppercase`,
					`items-center`,
				]}
			>
				{translatedUrls.map(({ code, url }) => (
					<li>
						<a href={url} class="block hover:opacity-50">
							{code}
						</a>
					</li>
				))}
			</ul>
		</details>
	)
}

<style>
	details[open] .chevron {
		transform: rotate(180deg);
	}
	.menu--active {
		&.textActive {
			&--primary {
				@apply text-primary;
			}
			&--secondary {
				@apply text-secondary;
			}
			&--tertiary {
				@apply text-tertiary;
			}
			&--white {
				@apply text-white;
			}
			&--black {
				@apply text-black;
			}
		}

		&.bgActive {
			&--primary {
				@apply bg-primary;
			}
			&--secondary {
				@apply bg-secondary;
			}
			&--tertiary {
				@apply bg-tertiary;
			}
			&--white {
				@apply bg-white;
			}
			&--black {
				@apply bg-black;
			}
		}
	}
</style>
