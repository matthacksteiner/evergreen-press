---
const { global, class: className, ...rest } = Astro.props;
const { lang } = Astro.params;
import { Icon } from 'astro-icon/components';
const defaultLang = global.defaultLang;
const allLangs = global.allLang;
const translations = global.translations;
const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;
const prefixDefaultLocale = global.prefixDefaultLocale;

const headerColor = global.headerColor;
const headerBackground = global.headerBackground;

// Determine the currently selected language; if none is provided, use the default.
const currentLang = lang || defaultLang.code;
const selectedLang =
	allLangs.find((l) => l.code === currentLang) || defaultLang;
---

{
	translations.length > 0 && (
		<details class:list={['relative', className]}>
			<summary class="flex cursor-pointer list-none items-center focus:outline-none">
				<Icon name="language" aria-hidden="true" class="mr-2 h-4 w-4" />
				<span class={`uppercase font--${headerFontSize} font-${headerFont}`}>
					{selectedLang.code}
				</span>

				<Icon
					name="chevron-down"
					aria-hidden="true"
					class="chevron ml-2 h-4 w-4 transition-transform duration-200"
				/>
			</summary>

			<ul
				class:list={[
					`bg--${headerBackground}`,
					`text--${headerColor}`,
					`absolute`,
					`right-0`,
					`top-6`,
					`z-10`,
					`mt-2`,
					`py-2`,
					`w-16`,
					`rounded`,
					`shadow-lg`,
					`flex`,
					`flex-col`,
					`gap-2`,
					`uppercase`,
					`items-center`,
				]}
			>
				{allLangs
					// Remove the currently selected language from the options.
					.filter((language) => language.code !== selectedLang.code)
					.map((language) => {
						const langCode = language.code;
						// Construct the URL for the language.
						const href =
							prefixDefaultLocale && langCode === defaultLang.code
								? '/'
								: `/${langCode === defaultLang.code ? '' : langCode}`;
						return (
							<li>
								<a href={href} class="block hover:opacity-50">
									{language.code}
								</a>
							</li>
						);
					})}
			</ul>
		</details>
	)
}

<style>
	details[open] .chevron {
		transform: rotate(180deg);
	}
	.menu--active {
		&.textActive {
			&--primary {
				@apply text-primary;
			}
			&--secondary {
				@apply text-secondary;
			}
			&--tertiary {
				@apply text-tertiary;
			}
			&--white {
				@apply text-white;
			}
			&--black {
				@apply text-black;
			}
		}

		&.bgActive {
			&--primary {
				@apply bg-primary;
			}
			&--secondary {
				@apply bg-secondary;
			}
			&--tertiary {
				@apply bg-tertiary;
			}
			&--white {
				@apply bg-white;
			}
			&--black {
				@apply bg-black;
			}
		}
	}
</style>
