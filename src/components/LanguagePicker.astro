---
const { global, class: className, ...rest } = Astro.props;
const { lang } = Astro.params;
const defaultLang = global.defaultLang;
const allLangs = global.allLang;
const translations = global.translations;
const currentLang = lang;
const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;
const prefixDefaultLocale = global.prefixDefaultLocale;
---

{
	translations.length > 0 && (
		<ul
			class:list={[
				'lang',
				className,
				`font--${headerFontSize}`,
				'flex',
				'gap-8',
				'uppercase',
				'lg:gap-4',
			]}
		>
			{allLangs
				.filter((language) => language.code !== currentLang)
				.filter((language) => lang || language.code !== defaultLang.code)
				.map((language) => {
					const lang = language.code;
					return (
						<li>
							{prefixDefaultLocale && lang === defaultLang.code ? (
								<a href="/">{language.code}</a>
							) : (
								<a href={`/${lang === defaultLang.code ? '' : lang}`}>
									{language.code}
								</a>
							)}
						</li>
					);
				})}
		</ul>
	)
}

<style lang="css" define:vars={{ headerFont }}>
	.langDesktop {
		font-family: var(--headerFont);
	}
</style>
