---
import { Image } from 'astro:assets';
const { image, widthMobile, widthDesktop } = Astro.props;
const classes = image?.classes;
const link = image?.linkexternal;

const imageProps = {
	src: image?.url,
	alt: image?.alt,
	width: image?.width,
	height: image?.height,
	id: image?.identifier,
	'class:list': [
		`widthMobile--${widthMobile || '100'}`,
		`widthDesktop--${widthDesktop || '100'}`,
		classes,
	].filter(Boolean),
};
---

{
	() => {
		if (!image) return null;

		if (!image.linktoggle) {
			return <Image {...imageProps} />;
		}

		if (!link) return null;

		let href, target, rel;

		switch (link.type) {
			case 'url':
				href = link.href;
				target = link.popup ? '_blank' : undefined;
				rel = link.popup ? 'noopener' : undefined;
				break;

			case 'page':
				href = link.hash ? `${link.uri}#${link.hash}` : `${link.uri}`;
				break;

			case 'file':
				href = image.url;
				target = link.popup ? '_blank' : undefined;
				rel = link.popup ? 'noopener' : undefined;
				break;

			default:
				return null;
		}

		// Render image wrapped in link
		return (
			<a href={href} target={target} rel={rel}>
				<Image {...imageProps} />
			</a>
		);
	}
}

<style lang="css">
	.widthMobile--auto {
		@apply w-auto;
	}
	.widthMobile--20 {
		@apply w-1/5;
	}
	.widthMobile--33 {
		@apply w-1/3;
	}
	.widthMobile--50 {
		@apply w-1/2;
	}
	.widthMobile--66 {
		@apply w-2/3;
	}
	.widthMobile--75 {
		@apply w-3/4;
	}
	.widthMobile--100 {
		@apply w-full;
	}
	.widthDesktop--auto {
		@apply lg:w-auto;
	}
	.widthDesktop--20 {
		@apply lg:w-1/5;
	}
	.widthDesktop--33 {
		@apply lg:w-1/3;
	}
	.widthDesktop--50 {
		@apply lg:w-1/2;
	}
	.widthDesktop--66 {
		@apply lg:w-2/3;
	}
	.widthDesktop--75 {
		@apply lg:w-3/4;
	}
	.widthDesktop--100 {
		@apply lg:w-full;
	}
</style>
