---
import Columns from '@components/Columns.astro';
import ScrollButton from '@components/ScrollButton.astro';
const { global, layouts } = Astro.props;
---

{
	layouts &&
		layouts.map((layout) => {
			const anchor = layout.anchor;
			const backgroundColor = layout.backgroundColor || 'transparent';
			const backgroundPadding = layout.backgroundPadding || 'both';
			const backgroundContainer = layout.backgroundContainer;
			const backgroundContainerColor =
				layout.backgroundContainerColor || 'transparent';
			const backgroundHeight = layout.backgroundHeight;
			const backgroundAlignVertical = layout.backgroundAlignVertical;
			const backgroundAlignHorizontal = layout.backgroundAlignHorizontal;
			const backgroundAlignItemsVertical = layout.backgroundAlignItemsVertical;
			const backgroundArrow = layout.backgroundArrow;
			const backgroundArrowColor = layout.backgroundArrowColor;
			const backgroundArrowSize = layout.backgroundArrowSize;
			const spacingMobileTop = layout.spacingMobileTop;
			const spacingMobileBottom = layout.spacingMobileBottom;
			const spacingDesktopTop = layout.spacingDesktopTop;
			const spacingDesktopBottom = layout.spacingDesktopBottom;
			const sectionProps = anchor ? { id: anchor } : {};
			return (
				<section
					{...sectionProps}
					class={`columns bg--${backgroundColor} align-vert--${backgroundAlignVertical} align-hor--${backgroundAlignHorizontal}
						${
							backgroundHeight === 'full'
								? 'flex min-h-screen'
								: backgroundHeight === 'half'
								? 'h-screenHalf flex'
								: 'auto'
						}`}
				>
					<div
						class={`grid-default bg--${backgroundContainerColor} ${backgroundContainer} spacingMobileTop--${spacingMobileTop} spacingMobileBottom--${spacingMobileBottom} spacingDesktopTop--${spacingDesktopTop} spacingDesktopBottom--${spacingDesktopBottom}
						align-vert--${backgroundAlignItemsVertical}`}
					>
						<Columns
							columns={layout.content.columns}
							global={global}
							backgroundPadding={layout.backgroundPadding}
						/>
					</div>
					<ScrollButton
						controls={backgroundArrow}
						color={backgroundArrowColor}
						size={backgroundArrowSize}
					/>
				</section>
			);
		})
}

<style class="css">
	.container-mobile {
		@apply max-lg:pl-[var(--grid-margin-mobile)] max-lg:pr-[var(--grid-margin-mobile)];
	}

	.spacingMobileTop--0 {
		@apply pt-0;
	}

	.spacingMobileTop--8 {
		@apply pt-2;
	}

	.spacingMobileTop--16 {
		@apply pt-4;
	}

	.spacingMobileTop--24 {
		@apply pt-6;
	}

	.spacingMobileTop--32 {
		@apply pt-8;
	}

	.spacingMobileTop--40 {
		@apply pt-10;
	}

	.spacingMobileTop--48 {
		@apply pt-12;
	}

	.spacingMobileTop--56 {
		@apply pt-14;
	}

	.spacingMobileTop--64 {
		@apply pt-16;
	}

	.spacingMobileTop--80 {
		@apply pt-20;
	}

	.spacingMobileTop--96 {
		@apply pt-24;
	}

	.spacingMobileTop--128 {
		@apply pt-32;
	}

	.spacingMobileTop--160 {
		@apply pt-40;
	}

	.spacingMobileTop--192 {
		@apply pt-48;
	}

	.spacingMobileBottom--0 {
		@apply pb-0;
	}

	.spacingMobileBottom--8 {
		@apply pb-2;
	}

	.spacingMobileBottom--16 {
		@apply pb-4;
	}

	.spacingMobileBottom--24 {
		@apply pb-6;
	}

	.spacingMobileBottom--32 {
		@apply pb-8;
	}

	.spacingMobileBottom--40 {
		@apply pb-10;
	}

	.spacingMobileBottom--48 {
		@apply pb-12;
	}

	.spacingMobileBottom--56 {
		@apply pb-14;
	}

	.spacingMobileBottom--64 {
		@apply pb-16;
	}

	.spacingMobileBottom--80 {
		@apply pb-20;
	}

	.spacingMobileBottom--96 {
		@apply pb-24;
	}

	.spacingMobileBottom--128 {
		@apply pb-32;
	}

	.spacingMobileBottom--160 {
		@apply pb-40;
	}

	.spacingMobileBottom--192 {
		@apply pb-48;
	}

	.spacingDesktopTop--0 {
		@apply lg:pt-0;
	}

	.spacingDesktopTop--8 {
		@apply lg:pt-2;
	}

	.spacingDesktopTop--16 {
		@apply lg:pt-4;
	}

	.spacingDesktopTop--24 {
		@apply lg:pt-6;
	}

	.spacingDesktopTop--32 {
		@apply lg:pt-8;
	}

	.spacingDesktopTop--40 {
		@apply lg:pt-10;
	}

	.spacingDesktopTop--48 {
		@apply lg:pt-12;
	}

	.spacingDesktopTop--56 {
		@apply lg:pt-14;
	}

	.spacingDesktopTop--64 {
		@apply lg:pt-16;
	}

	.spacingDesktopTop--80 {
		@apply lg:pt-20;
	}

	.spacingDesktopTop--96 {
		@apply lg:pt-24;
	}

	.spacingDesktopTop--128 {
		@apply lg:pt-32;
	}

	.spacingDesktopTop--160 {
		@apply lg:pt-40;
	}

	.spacingDesktopTop--192 {
		@apply lg:pt-48;
	}
	.spacingDesktopBottom--0 {
		@apply lg:pb-0;
	}

	.spacingDesktopBottom--8 {
		@apply lg:pb-2;
	}

	.spacingDesktopBottom--16 {
		@apply lg:pb-4;
	}

	.spacingDesktopBottom--24 {
		@apply lg:pb-6;
	}

	.spacingDesktopBottom--32 {
		@apply lg:pb-8;
	}

	.spacingDesktopBottom--40 {
		@apply lg:pb-10;
	}

	.spacingDesktopBottom--48 {
		@apply lg:pb-12;
	}

	.spacingDesktopBottom--56 {
		@apply lg:pb-14;
	}

	.spacingDesktopBottom--64 {
		@apply lg:pb-16;
	}

	.spacingDesktopBottom--80 {
		@apply lg:pb-20;
	}

	.spacingDesktopBottom--96 {
		@apply lg:pb-24;
	}

	.spacingDesktopBottom--128 {
		@apply lg:pb-32;
	}

	.spacingDesktopBottom--160 {
		@apply lg:pb-40;
	}

	.spacingDesktopBottom--192 {
		@apply lg:pb-48;
	}
</style>

<script>
	const arrowButton = document.querySelector('.arrow');
	const header = document.querySelector('header');

	if (arrowButton) {
		arrowButton.addEventListener('click', () => {
			const currentColumns = arrowButton.closest('.columns');
			const nextColumns = currentColumns.nextElementSibling as HTMLElement;
			let distanceToScroll;
			if (nextColumns && nextColumns.classList.contains('columns')) {
				const headerHeight = header?.offsetHeight || 0;
				distanceToScroll = nextColumns.offsetTop - headerHeight;
			} else {
				distanceToScroll = nextColumns?.offsetTop || 0;
			}
			window.scrollTo({
				top: distanceToScroll,
				behavior: 'smooth',
			});
		});
	}
</script>