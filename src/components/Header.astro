---
import Hamburger from '@components/Hamburger.astro';
import Navigation from '@components/Navigation.astro';
import LanguagePicker from './LanguagePicker.astro';
import { Icon } from 'astro-icon';

const { global, data } = Astro.props;
const baseSize = 16;

const headerActive = global.headerActive;
const headerColor = global.headerColor;
const headerBackground = global.headerBackground;
const headerColorActive = global.headerColorActive;
const headerBackgroundActive = global.headerBackgroundActive;

const headerFont = global.headerFont;
const headerFontSize = global.headerFontSize;

const logoDesktop =
	global.logoDesktop / baseSize
		? global.logoDesktop / baseSize + 'rem'
		: '25rem';

const logoDesktopActive =
	global.logoDesktopActive / baseSize
		? global.logoDesktopActive / baseSize + 'rem'
		: '12.5rem';

const logoMobile =
	global.logoMobile / baseSize
		? global.logoMobile / baseSize + 'rem'
		: '12.5rem';

const logoMobileActive =
	global.logoMobileActive / baseSize
		? global.logoMobileActive / baseSize + 'rem'
		: '6.25rem';

const logoAlign = global.logoAlign;
const logoFile = global.logoFile;
---

{
	headerActive === true ? (
		<header
			class={`bg--${headerBackground} text--${headerColor} textActive--${headerColorActive} bgActive--${headerBackgroundActive} fixed z-20 w-full py-4 transition-all duration-300 ease-in-out md:py-8`}
		>
			<div class="container flex items-center">
				<div id="logo" class={`${logoAlign} relative z-20 w-80 max-md:py-4`}>
					<a href="/" aria-label="ZurÃ¼ck zur Homepage">
						{logoFile.src ? (
							<Fragment
								set:html={logoFile.source}
								id="logo"
								alt={
									logoFile.alt ? `${logoFile.alt}` : `Logo ${global.siteTitle}`
								}
								class="transition-all duration-300 ease-in-out"
							/>
						) : (
							<Icon
								name="fallback"
								id="fallback"
								alt={`Logo ${global.siteTitle}`}
								class="transition-all duration-300 ease-in-out"
							/>
						)}
					</a>
				</div>
				<nav
					class={`nav-list font--${headerFontSize} ml-auto flex transition-all duration-300 ease-in-out`}
				>
					<Hamburger global={global} data={data} />
					<Navigation global={global} data={data} />
					<LanguagePicker global={global} class="hidden lg:flex" />
				</nav>
			</div>
		</header>
	) : null
}

<style
	lang="css"
	define:vars={{
		headerFont,
		logoMobile,
		logoDesktop,
		logoDesktopActive,
		logoMobileActive,
	}}
>
	.nav-list {
		font-family: var(--headerFont);
	}
	.header--active {
		@apply py-0 shadow-lg lg:py-4;
	}

	.header--active.textActive--primary {
		@apply text-primary;
	}

	.header--active.textActive--secondary {
		@apply text-secondary;
	}

	.header--active.textActive--tertiary {
		@apply text-tertiary;
	}

	.header--active.textActive--white {
		@apply text-white;
	}

	.header--active.textActive--black {
		@apply text-black;
	}

	.header--active.bgActive--primary {
		@apply bg-primary;
	}

	.header--active.bgActive--secondary {
		@apply bg-secondary;
	}

	.header--active.bgActive--tertiary {
		@apply bg-tertiary;
	}

	.header--active.bgActive--white {
		@apply bg-white;
	}

	.header--active.bgActive--black {
		@apply bg-black;
	}

	#logo,
	svg#fallback {
		@apply w-[var(--logoMobile)] md:w-[var(--logoDesktop)];
	}

	.header--active #logo,
	.header--active svg#fallback {
		@apply w-[var(--logoMobileActive)] md:w-[var(--logoDesktopActive)];
	}

	#logo.center,
	svg#fallback.center {
		@apply left-1/2 -translate-x-1/2;
	}
</style>

<script>
	const header = document.querySelector('header');
	const hamburger = document.querySelector('.c-hamburger-inner');
	const colorElement = document.querySelector('.c-hamburger');
	const colorClass =
		colorElement &&
		Array.from(colorElement.classList)
			.find((className) => className.includes('hamburgerColorActive--'))
			.replace('Active', '');

	if (header) {
		window.onscroll = function () {
			if (
				document.body.scrollTop > 80 ||
				document.documentElement.scrollTop > 80
			) {
				header.classList.add('header--active');
				if (colorClass) {
					hamburger.classList.add(colorClass);
				}
			} else {
				header.classList.remove('header--active');
				if (colorClass) {
					hamburger.classList.remove(colorClass);
				}
			}
		};
	}
</script>

