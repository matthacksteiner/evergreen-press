---
import BlockText from '@blocks/BlockText.astro';
import BlockDivider from '@blocks/BlockDivider.astro';
import BlockImage from '@blocks/BlockImage.astro';
import BlockTitle from '@blocks/BlockTitle.astro';
import BlockSlider from '@blocks/BlockSlider.astro';
import BlockButton from '@blocks/BlockButton.astro';
import BlockAccordion from '@blocks/BlockAccordion.astro';
import BlockLine from '@blocks/BlockLine.astro';
import BlockVector from '@blocks/BlockVector.astro';
import BlockVideo from '@blocks/BlockVideo.astro';
import BlockIconList from '@blocks/BlockIconList.astro';
import BlockMenu from '@blocks/BlockMenu.astro';

const { blocks, global } = Astro.props;
const baseSize = 16;
---

{
	blocks ? (
		blocks.map((block) => {
			switch (block.type) {
				case 'video':
					return (
						<BlockVideo
							source={block.content.source}
							url={block.content.url}
							file={block.content.file}
							options={block.content.options}
							ratioMobile={block.content.ratiomobile}
							ratioDesktop={block.content.ratio}
							thumbnail={block.content.thumbnail}
							/>
							);
				case 'vector':
					return (
						<BlockVector
							image={block.content.image}
							toggle={block.content.toggle}
							link={block.content.linkexternal}
							widthMobile={block.content.widthmobile}
							widthDesktop={block.content.widthdesktop}
							widthAlign={block.content.widthalign}
						/>
					);

				case 'line':
					return (
						<BlockLine
							borderStyle={block.content.borderstyle}
							borderWidth={block.content.borderwidth}
							borderColor={block.content.bordercolor}
						/>
					);
				case 'accordion':
					return (
						<BlockAccordion
							items={block.content.acc}
							Level={block.content.level}
							titleFont={block.content.titlefont}
							titleColor={block.content.titlecolor}
							titleSize={block.content.titlesize}
							textFont={block.content.textfont}
							textColor={block.content.textcolor}
							textSize={block.content.textsize}
							textAlign={block.content.textalign}
							borderWidth={block.content.borderwidth}
							borderColor={block.content.bordercolor}
						/>
					);
				case 'iconlist':
					return (
						<BlockIconList
							items={block.content.list}
							font={block.content.textfont}
							color={block.content.textcolor}
							size={block.content.textsize}
							align={block.content.textalign}
							iconSize={block.content.iconsize}
							iconGap={block.content.icongap}
							iconListGap={block.content.iconlistgap}
						/>
					);
				case 'menu':
					return (
						<BlockMenu
							items={block.content.nav}
							font={block.content.textfont}
							color={block.content.textcolor}
							size={block.content.textsize}
							gap={block.content.listgap}
						/>
					);
				case 'button':
					return (
						<BlockButton
							link={block.content.link}
							global={global}
							align={block.content.buttonalign}
						/>
					);
				case 'title':
					return (
						<BlockTitle
							title={block.content.text}
							Level={block.content.level}
							font={block.content.titlefont}
							color={block.content.titlecolor}
							size={block.content.titlesize}
							align={block.content.titlealign}
						/>
					);
				case 'text':
					return (
						<BlockText
							text={block.content.text}
							font={block.content.textfont}
							color={block.content.textcolor}
							size={block.content.textsize}
							align={block.content.textalign}
							headlines={global.headlines}
						/>
					);
				case 'image':
					return (
						<BlockImage
							image={block.content.image}
							link={block.content.linkexternal}
							toggle={block.content.toggle}
							ratioMobile={block.content.ratiomobile}
							ratioDesktop={block.content.ratio}
						/>
					);
				case 'slider':
					return (
						<BlockSlider
							images={block.content.images}
							toggle={block.content.toggle}
							Level={block.content.level}
							text={block.content.caption}
							font={block.content.textfont}
							textcolor={block.content.textcolor}
							size={block.content.textsize}
							align={block.content.textalign}
							ratioMobile={block.content.ratiomobile}
							ratioDesktop={block.content.ratio}
							controls={block.content.controls}
							color={block.content.color}
							time={block.content.time}
							viewMobile={block.content.viewmobile}
							viewDesktop={block.content.viewdesktop}
							viewPaddingMobile={block.content.viewpaddingmobile}
							viewPaddingDesktop={block.content.viewpaddingdesktop}
						/>
					);
				case 'divider':
					return (
						<BlockDivider
							spacingMobileTop={
								block.content.spacingmobiletop / baseSize + 'rem'
							}
							spacingMobileBottom={
								block.content.spacingmobilebottom / baseSize + 'rem'
							}
							spacingDesktopTop={
								block.content.spacingdesktoptop / baseSize + 'rem'
							}
							spacingDesktopBottom={
								block.content.spacingdesktopbottom / baseSize + 'rem'
							}
						/>
					);

				default:
					return null;
			}
		})
	) : (
		<section class="container">
			<p>Kein BlÃ¶cke gefunden.</p>
		</section>
	)
}
