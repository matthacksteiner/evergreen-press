---
import BlockText from '@blocks/BlockText.astro';
import BlockDivider from '@blocks/BlockDivider.astro';
import BlockImage from '@blocks/BlockImage.astro';
import BlockTitle from '@blocks/BlockTitle.astro';
const { blocks, data, global } = Astro.props;
---

{
	blocks ? (
		blocks.map((block) => {
			switch (block.type) {
				case 'blockImage':
					return (
						<BlockImage
							images={block.content.images}
							ratio={block.content.ratio}
							width={block.content.width}
							gridGapMobile={global.gridGapMobile + 'px'}
							gridGapDesktop={global.gridGapDesktop + 'px'}
							backgroundContainer={block.content.backgroundcontainer}
							backgroundColor={block.content.backgroundcolor}
							widthMobile={block.content.widthmobile}
							startMobile={block.content.startmobile}
							widthDesktop={block.content.widthdesktop}
							startDesktop={block.content.startdesktop}
							spacingMobileTop={block.content.spacingmobiletop + 'px'}
							spacingMobileBottom={block.content.spacingmobilebottom + 'px'}
							spacingDesktopTop={block.content.spacingdesktoptop + 'px'}
							spacingDesktopBottom={block.content.spacingdesktopbottom + 'px'}
						/>
					);
				case 'blockTitle':
					return (
						<BlockTitle
							title={block.content.title}
							font={block.content.font}
							color={block.content.color}
							size={block.content.size}
							align={block.content.align}
							Headline={block.content.headline}
							backgroundContainer={block.content.backgroundcontainer}
							backgroundColor={block.content.backgroundcolor}
							widthMobile={block.content.widthmobile}
							startMobile={block.content.startmobile}
							widthDesktop={block.content.widthdesktop}
							startDesktop={block.content.startdesktop}
							spacingMobileTop={block.content.spacingmobiletop + 'px'}
							spacingMobileBottom={block.content.spacingmobilebottom + 'px'}
							spacingDesktopTop={block.content.spacingdesktoptop + 'px'}
							spacingDesktopBottom={block.content.spacingdesktopbottom + 'px'}
						/>
					);
				case 'blockText':
					return (
						<BlockText
							text={block.content.text}
							font={block.content.font}
							color={block.content.color}
							size={block.content.size}
							align={block.content.align}
							backgroundContainer={block.content.backgroundcontainer}
							backgroundColor={block.content.backgroundcolor}
							widthMobile={block.content.widthmobile}
							startMobile={block.content.startmobile}
							widthDesktop={block.content.widthdesktop}
							startDesktop={block.content.startdesktop}
							spacingMobileTop={block.content.spacingmobiletop + 'px'}
							spacingMobileBottom={block.content.spacingmobilebottom + 'px'}
							spacingDesktopTop={block.content.spacingdesktoptop + 'px'}
							spacingDesktopBottom={block.content.spacingdesktopbottom + 'px'}
						/>
					);
				case 'blockDivider':
					return (
						<BlockDivider
							spacingMobileTop={block.content.spacingmobiletop + 'px'}
							spacingMobileBottom={block.content.spacingmobilebottom + 'px'}
							spacingDesktopTop={block.content.spacingdesktoptop + 'px'}
							spacingDesktopBottom={block.content.spacingdesktopbottom + 'px'}
						/>
					);

				default:
					return null;
			}
		})
	) : (
		<section class="container">
			<p>Kein Bl√∂cke gefunden.</p>
		</section>
	)
}
