---
import Button from '@blocks/BlockButton.astro';
const { data, global, links } = Astro.props;
const { lang } = Astro.params;
const path = Astro.url.pathname;
const currentLang = data.lang;
const translations = global.translations;
const logoAlign = global.logoAlign;

const getCommonClasses = (item, isActive, isLast) => [
	'nav-link',
	'max-lg:mb-8',
	logoAlign === 'center' ? 'lg:my-2' : 'lg:mr-16 2xl:mr-24',
	isActive && 'active',
	isLast && 'last:mr-0',
	...(Array.isArray(item.classes) ? item.classes : [item.classes]),
];
---

{
	links &&
		links.map((item) => {
			if (!item) return null;
			const isUrl = item.type === 'url';
			const isPopup = item.popup === true;

			const href = isUrl
				? item.href
				: item.hash
				? `${translations.length > 0 && lang ? '/' + currentLang : '/'}#${
						item.hash
				  }`
				: translations.length > 0 && lang
				? `/${currentLang}/${item.uri}`
				: `/${item.uri}`;

			const target = isUrl ? `${isPopup ? '_blank' : '_self'}` : undefined;
			const rel = isUrl ? `${isPopup ? 'noopener noreferrer' : ''}` : undefined;

			const isActive = path.includes(item.uri);
			const isLast = translations.length === 0;

			if (item.classes.includes('cta')) {
				return (
					<Button
						link={{ ...item }}
						global={global}
						className={getCommonClasses(item, isActive, isLast).join(' ')}
					>
						{item.title}
					</Button>
				);
			}

			return (
				<a
					href={href}
					target={target}
					rel={rel}
					class:list={getCommonClasses(item, isActive, isLast)}
				>
					{item.title}
				</a>
			);
		})
}
