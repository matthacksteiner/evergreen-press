---
import Layouts from '@components/Layouts.astro';
import ImageComponent from '@components/ImageComponent.astro';
import Pagination from '@components/Pagination.astro';

const { data, global, page } = Astro.props;
const baseSize = 16;
const { settings } = data;
const items = page.data;
const {
	ratio,
	grid: { span, gap },
	title,
	text,
} = settings;

const {
	level: TitleLevel,
	font: titleFont,
	color: titleColor,
	size: titleSize,
	align: titleAlign,
} = title;

const {
	font: textFont,
	color: textColor,
	size: textSize,
	align: textAlign,
} = text;
const layoutPre = data.layoutPre;
const layoutPost = data.layoutPost;
const ratioMobile = settings.ratioMobile;
const spanMobile = settings.grid.spanMobile;
const gapDesktop = gap / baseSize + 'rem';
const gapMobile = gap / baseSize + 'rem';
const gridBlockMobile =
	global.gridBlockMobile / baseSize
		? global.gridBlockMobile / baseSize + 'rem'
		: '16px';
const gridBlockDesktop =
	global.gridBlockDesktop / baseSize
		? global.gridBlockDesktop / baseSize + 'rem'
		: '16px';
const pathname = new URL(Astro.request.url).pathname.split('/');
const translations = global.translations.map((lang) => lang.code);
const prefixDefaultLocale = global.prefixDefaultLocale;
const currentLang = data.lang;
const defaultLang = global.defaultLang.code;
const firstPath =
	translations.length < 1 ||
	(!prefixDefaultLocale && defaultLang === currentLang)
		? pathname[1]
		: pathname[1] + '/' + pathname[2];
---

{layoutPre && <Layouts layouts={layoutPre} global={global} class="layoutPre" />}

<section class="section container">
	<div class="grid-default">
		{
			items.map((item) => {
				const image = item.thumbnail;
				return (
					<div class:list={[`col-span-${spanMobile}`, `lg:col-span-${span}`]}>
						<a href={item.uri}>
							<ImageComponent
								global={global}
								image={image}
								loading="lazy"
								ratioMobile={ratioMobile}
								ratioDesktop={ratio}
								backgroundContainer="container"
								span={span}
							/>
						</a>

						<TitleLevel
							class:list={[
								'title',
								`text--${titleColor}`,
								`font--${titleSize}`,
								`text--${titleAlign}`,
							]}
							set:html={item.title}
						/>

						<p
							class:list={[
								'text',
								`text--${textColor}`,
								`font--${textSize}`,
								`text--${textAlign}`,
							]}
							set:html={item.description}
						/>
					</div>
				);
			})
		}
	</div>
	<Pagination
		global={global}
		length={page.lastPage}
		currentUrl={page.url.current}
		currentPage={page.currentPage}
		firstUrl={`/${firstPath}`}
		prevUrl={page.url.prev}
		nextUrl={page.url.next}
		lastUrl={`/${firstPath}/${page.lastPage}`}
	/>
</section>

{
	layoutPost && (
		<Layouts layouts={layoutPost} global={global} class="layoutPost" />
	)
}

<style
	lang="css"
	define:vars={{
		gapDesktop,
		gapMobile,
		gridBlockMobile,
		gridBlockDesktop,
		titleFont,
		textFont,
	}}
>
	.title {
		@apply mt-[var(--gridBlockMobile)] lg:mt-[var(--gridBlockDesktop)];
		font-family: var(--titleFont);
	}

	.text {
		font-family: var(--textFont);
	}

	.grid-default {
		@apply gap-y-[var(--gapMobile)] lg:gap-y-[var(--gapDesktop,)];
	}
</style>
