---
import Picture from '@components/Picture.astro';
import ImageCaption from '@components/ImageCaption.astro';

const {
	global,
	image,
	ratioDesktop,
	ratioMobile,
	loading,
	span,
	backgroundContainer,
	class: className,
} = Astro.props;

const baseSize = 16;
const gridBlockMobile =
	global.gridBlockMobile / baseSize
		? global.gridBlockMobile / baseSize + 'rem'
		: '16px';
const gridBlockDesktop =
	global.gridBlockDesktop / baseSize
		? global.gridBlockDesktop / baseSize + 'rem'
		: '16px';

const pictureProps = {
	src: image.url,
	urlFocus: image.urlFocus,
	urlFocusMobile: image.urlFocusMobile,
	width: image.width,
	height: image.height,
	alt: image.alt,
	ratioMobile: ratioMobile,
	ratioDesktop: ratioDesktop,
	backgroundContainer: backgroundContainer,
	loading: loading,
	span: span,
	position: 'relative',
	class: `${className} w-full object-cover`,
};
---

{
	image.linktoggle ? (
		<a
			href={
				image.linkexternal.type === 'url'
					? image.linkexternal.href
					: image.linkexternal.uri
			}
			target={image.linkexternal.popup ? '_blank' : undefined}
			rel={image.linkexternal.popup ? 'noopener' : undefined}
		>
			<div
				class={`relative ${
					image.captionoverlay === 'overlay' ? 'overlay' : ''
				}`}
			>
				<Picture {...pictureProps} />
				{image.captiontoggle ? <ImageCaption {...image} /> : null}
			</div>
		</a>
	) : (
		<div
			class={`relative ${image.captionoverlay === 'overlay' ? 'overlay' : ''}`}
		>
			<Picture {...pictureProps} />
			{image.captiontoggle ? <ImageCaption {...image} /> : null}
		</div>
	)
}

<style lang="css" define:vars={{ gridBlockMobile, gridBlockDesktop }}>
	.text-content {
		@apply mt-[var(--gridBlockMobile)] lg:mt-[var(--gridBlockDesktop)];
	}
	.overlay:before {
		@apply absolute left-0 top-0 h-full w-full bg-[rgba(_0,0,0,0.25_)] content-[''];
	}
</style>
