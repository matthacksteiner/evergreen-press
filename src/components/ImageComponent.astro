---
import { toRem } from '@lib/helpers.js';
import Picture from '@components/Picture.astro';
import ImageCaption from '@components/ImageCaption.astro';
import ImageCopyright from './ImageCopyright.astro';
const { lang } = Astro.params;
const currentLang = lang;

const {
	global,
	image,
	ratioDesktop,
	ratioMobile,
	loading,
	span,
	backgroundContainer,
	class: className,
} = Astro.props;
const gridBlockMobile = toRem(global.gridBlockMobile) || '1rem';
const gridBlockDesktop = toRem(global.gridBlockDesktop) || '1rem';
const pictureProps = {
	src: image.url,
	urlFocus: image.urlFocus,
	urlFocusMobile: image.urlFocusMobile,
	width: image.width,
	height: image.height,
	alt: image.alt,
	name: image.name,
	id: image.identifier,
	ratioMobile: ratioMobile,
	ratioDesktop: ratioDesktop,
	backgroundContainer: backgroundContainer,
	loading: loading,
	span: span,
	gridGapMobile: global.gridGapMobile,
	gridMarginMobile: global.gridMarginMobile,
	gridGapDesktop: global.gridGapDesktop,
	gridMarginDesktop: global.gridMarginDesktop,
	position: 'relative',
	class: `${className} ${image.classes} w-full object-cover`,
	thumbhash: image.thumbhash,
};

const link = image.linkexternal;
---

{
	image.linktoggle ? (
		<a
			href={
				link.type === 'url'
					? link.href
					: link.hash
					? `${currentLang ? `/${currentLang}/` : ''}${link.uri}#${link.hash}`
					: `${currentLang ? `/${currentLang}/` : ''}${link.uri}`
			}
			target={link.popup ? '_blank' : undefined}
			rel={link.popup ? 'noopener' : undefined}
			aria-label={`Mehr zu ${image.alt}`}
		>
			<div
				class:list={[
					'relative',
					image.captionoverlay === 'overlay' && 'overlay',
				]}
			>
				<Picture {...pictureProps} />
				{image.captiontoggle ? (
					<ImageCaption {...image} global={global} />
				) : null}
				{image.copyrighttoggle ? <ImageCopyright {...image} /> : null}
			</div>
		</a>
	) : (
		<div
			class:list={['relative', image.captionoverlay === 'overlay' && 'overlay']}
		>
			<Picture {...pictureProps} />
			{image.captiontoggle ? <ImageCaption {...image} global={global} /> : null}
			{image.copyrighttoggle ? <ImageCopyright {...image} /> : null}
		</div>
	)
}

<style lang="css" define:vars={{ gridBlockMobile, gridBlockDesktop }}>
	.text-content {
		@apply mt-[var(--gridBlockMobile)] lg:mt-[var(--gridBlockDesktop)];
	}
	.overlay:before {
		@apply absolute left-0 top-0 h-full w-full bg-[rgba(_0,0,0,0.25_)] content-[''];
	}
</style>
