name: Push Template Changes to Children

on:
  workflow_dispatch:
    inputs:
      child_repositories:
        description: 'Optional: Child repository URLs (space-separated). Overrides child_repo_list_file if provided.'
        required: false
        type: string
      child_repo_list_file:
        description: 'File in the repo containing a list of child repository URLs (one URL per line).'
        required: false
        default: '.github/child_repositories.list'
        type: string
      branch_to_push:
        description: 'Branch in this template repository to push (e.g., main)'
        required: true
        default: 'main'
        type: string
      target_branch_in_children:
        description: 'Target branch in child repositories (e.g., main)'
        required: true
        default: 'main'
        type: string
      force_push:
        description: 'Force push (overwrite target branch in children)? Use with caution.'
        required: true
        type: boolean
        default: false

jobs:
  push_to_children:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Template Repository
        uses: actions/checkout@v4
        with:
          # This token is used to checkout the template repository itself.
          # For pushing to children, PAT_TOKEN (CHILD_REPO_PAT secret) will be used.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine Child Repositories
        id: get_repos
        env:
          CHILD_REPOSITORIES_INPUT: ${{ github.event.inputs.child_repositories }}
          CHILD_REPO_LIST_FILE: ${{ github.event.inputs.child_repo_list_file }}
        run: |
          repos_to_process=""
          if [ -n "$CHILD_REPOSITORIES_INPUT" ]; then
            echo "Using child repositories from input."
            repos_to_process="$CHILD_REPOSITORIES_INPUT"
          elif [ -f "$CHILD_REPO_LIST_FILE" ]; then
            echo "Reading child repositories from file: $CHILD_REPO_LIST_FILE"
            # Read file, remove empty lines, and join with spaces
            repos_to_process=$(cat "$CHILD_REPO_LIST_FILE" | sed '/^$/d' | tr '\n' ' ')
            if [ -z "$repos_to_process" ]; then
              echo "Error: Child repository list file ($CHILD_REPO_LIST_FILE) is empty."
              exit 1
            fi
          else
            echo "Error: No child repositories provided via input, and list file ($CHILD_REPO_LIST_FILE) not found or empty."
            exit 1
          fi
          echo "Final list of repositories to process: $repos_to_process"
          # Set output for the next step
          echo "repos_string=$repos_to_process" >> $GITHUB_OUTPUT

      - name: Push to Child Repositories
        env:
          REPOS_FROM_PREVIOUS_STEP: ${{ steps.get_repos.outputs.repos_string }}
          BRANCH_TO_PUSH: ${{ github.event.inputs.branch_to_push }}
          TARGET_BRANCH_IN_CHILDREN: ${{ github.event.inputs.target_branch_in_children }}
          FORCE_PUSH_INPUT: ${{ github.event.inputs.force_push }}
          # This secret (CHILD_REPO_PAT) needs to be created in the template repository's settings.
          # It should be a Personal Access Token (PAT) with 'repo' scope
          # to allow pushing to the child repositories.
          PAT_TOKEN: ${{ secrets.CHILD_REPO_PAT }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          if [ -z "$PAT_TOKEN" ]; then
            echo "Error: PAT_TOKEN is not set. Please configure the CHILD_REPO_PAT secret in your repository settings."
            exit 1
          fi

          if [ -z "$REPOS_FROM_PREVIOUS_STEP" ]; then
            echo "Error: No child repositories determined from previous step."
            exit 1
          fi

          echo "Branch to push from template: $BRANCH_TO_PUSH"
          echo "Target branch in children: $TARGET_BRANCH_IN_CHILDREN"
          echo "Force push: $FORCE_PUSH_INPUT"

          # Split the space-separated string of child repositories into an array
          IFS=' ' read -r -a repos <<< "$REPOS_FROM_PREVIOUS_STEP"

          if [ ${#repos[@]} -eq 0 ]; then
            echo "No child repositories to process after parsing."
            exit 0
          fi

          index=0
          for repo_url in "${repos[@]}"; do
            # Trim whitespace that might come from tr in the previous step
            trimmed_repo_url=$(echo "$repo_url" | xargs)
            if [ -z "$trimmed_repo_url" ]; then
              continue # Skip empty entries
            fi

            repo_url_pat=$(echo "$trimmed_repo_url" | sed "s|https://github.com/|https://x-access-token:${PAT_TOKEN}@github.com/|")

            echo "Processing child repository: $trimmed_repo_url"

            remote_name="child_${index}"
            index=$((index + 1))

            echo "Adding remote $remote_name for $trimmed_repo_url"
            git remote remove "$remote_name" 2>/dev/null || true
            git remote add "$remote_name" "$repo_url_pat"

            echo "Attempting to list remote refs for $trimmed_repo_url with PAT to check access..."
            if git ls-remote "${repo_url_pat}" --refs >/dev/null; then
              echo "Successfully listed remote refs. Repository is accessible with PAT."
            else
              echo "Error: Failed to list remote refs for $trimmed_repo_url using PAT."
              echo "This likely indicates an issue with the PAT, its permissions for this repo, or the repo URL itself."
              # Optionally, you could have the script exit here if ls-remote fails:
              # exit 1
              # For now, we'll let it proceed to the push attempt to see its error too.
            fi

            push_command="git push $remote_name ${BRANCH_TO_PUSH}:${TARGET_BRANCH_IN_CHILDREN}"
            if [ "$FORCE_PUSH_INPUT" = "true" ]; then
              push_command="$push_command --force"
            fi

            echo "Attempting to push to $remote_name ($trimmed_repo_url) with command: $push_command"
            if $push_command; then
              echo "Successfully pushed to $trimmed_repo_url"
            else
              echo "Failed to push to $trimmed_repo_url."
              echo "Common reasons for failure:"
              echo "1. Incorrect repository URL."
              echo "2. CHILD_REPO_PAT secret does not have sufficient permissions (requires 'repo' scope for the child repository)."
              echo "3. The target branch ($TARGET_BRANCH_IN_CHILDREN) does not exist in the child repository and force push is not enabled."
              echo "4. If not using force push, the push was rejected due to diverged histories."
            fi

            git remote remove "$remote_name" 2>/dev/null || true
          done
          echo "All specified child repositories processed."
