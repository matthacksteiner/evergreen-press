name: Update Child Repositories

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message for the update'
        required: true
        default: 'Update from template repository'
      branchName:
        description: 'Branch name in child repositories where changes will be committed'
        required: true
        default: 'update-from-template'
      createPR:
        description: 'Create a pull request in child repositories'
        required: true
        type: boolean
        default: true

jobs:
  update-child-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout template repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Read child repositories
        id: read-repos
        run: |
          echo "repos=$(cat .github/child-repositories.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Process child repositories
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.inputs.message }}
          BRANCH_NAME: ${{ github.event.inputs.branchName }}
          CREATE_PR: ${{ github.event.inputs.createPR }}
        run: |
          mkdir -p temp
          cd temp

          # Configure git credentials globally for this session
          git config --global credential.helper store
          echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > ~/.git-credentials

          # Read repositories from JSON
          REPOSITORIES=$(echo '${{ steps.read-repos.outputs.repos }}' | jq -r '.repositories[].url')

          for REPO_URL in $REPOSITORIES; do
            echo "Processing repository: $REPO_URL"

            # Extract repository name
            REPO_NAME=$(basename -s .git "$REPO_URL")
            REPO_DIR="$REPO_NAME"

            # Clone child repository with authentication
            REPO_URL_WITH_TOKEN=$(echo "$REPO_URL" | sed -e "s|https://|https://x-access-token:$GITHUB_TOKEN@|")
            git clone "$REPO_URL_WITH_TOKEN" "$REPO_DIR"
            cd "$REPO_DIR"

            # Create and switch to new branch
            git checkout -b "$BRANCH_NAME"

            # Add template as a remote
            TEMPLATE_URL_WITH_TOKEN="https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git"
            git remote add template "$TEMPLATE_URL_WITH_TOKEN"

            # Fetch template changes
            git fetch template

            # Merge template changes
            if git merge template/main --allow-unrelated-histories -m "$COMMIT_MESSAGE"; then
              echo "Successfully merged changes"
            else
              echo "Merge conflicts detected, attempting to resolve..."
              # Here we choose to abort for safety, as conflict resolution can be complex
              git merge --abort
              echo "Skipping repository due to merge conflicts: $REPO_NAME"
              cd ..
              continue
            fi

            # Push changes
            git push origin "$BRANCH_NAME"

            # Create PR if requested
            if [ "$CREATE_PR" = "true" ]; then
              # Temporarily unset GH_TOKEN to avoid conflicts with gh CLI
              unset GH_TOKEN
              # Use GITHUB_TOKEN directly with gh CLI
              gh auth login --with-token <<< "$GITHUB_TOKEN"

              gh pr create \
                --title "Update from template repository" \
                --body "This PR updates the repository with the latest changes from the template repository." \
                --base main \
                --head "$BRANCH_NAME"
            fi

            cd ..
          done
